@inherits LayoutComponentBase
@using Microsoft.AspNetCore.SignalR.Client
@using EMS.DB.Models
@using EMS.DB.Constant
@using  EMS.DB.Repository.Interface
@inject INotificationMessagesRepository _NotificationMessagesRepository;
@inject NavigationManager _NavigationManager
@*<div class="page">
        <div class="sidebar">
            <NavMenu />
        </div>
        <div id="noti_Container">
            <div class='ikrNoti_Counter'>@currentUserMsgList.Count()</div>
            <div class='ikrNoti_Button' style="background: #2E467C;" @onclick="NotificationHideShoe"></div>
            <div class='ikrNotifications' style="display:@BoxCss !important" @onclick="NotificationHideShoe">
                <h3>Notifications (<span class='notiCounterOnHead'>@currentUserMsgList.Count()</span>)</h3>
                <div class='ikrNotificationItems'>
                    @foreach (var nmobj in currentUserMsgList)
                    {
                        <div class='ikrsingleNotiDiv' notiId="@nmobj.UserId">
                            <h4 class='ikrNotiFromPropName'>Sender : @nmobj.Message</h4>
                            <h5 class='ikrNotificationTitle'>@nmobj.Title</h5>
                        </div>
                    }
                </div>
                <div class="ikrSeeAll"><a href="#">see all</a></div>
            </div>
        </div>
        <div class="main">
            <div class="top-row px-4">
                <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
            </div>

            <div class="content px-4">
                @Body
            </div>
        </div>
    </div>
    <MudThemeProvider />
    <MudDialogProvider />
    <MudSnackbarProvider />
    @code{
        private List<NotificationMessages> allNotificationMgs = new List<NotificationMessages>();
        private List<NotificationMessages> currentUserMsgList = new List<NotificationMessages>();
        private NotificationMessages notificationMessage = new NotificationMessages();
        private HubConnection hubConnection;
        private string BoxCss = "none";
        public bool IsConnected =>
          hubConnection?.State == HubConnectionState.Connected;

        private void NotificationHideShoe()
        {
            if (BoxCss == "none") BoxCss = "block";
            else BoxCss = "none";
        }

    }*@

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">Event Mentor</MudText>
        <MudSpacer />
            <MudBadge Content="@currentUserMsgList.Count()" Color="Color.Dark" Overlap="true" Class="mx-6 my-4 cursor-pointer">
                <MudIcon Icon="@Icons.Material.Filled.Notifications" Color="Color.Secondary" @onclick="@NotificationHideShoe" />
            </MudBadge>

        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        @*NavMenu*@
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        @*Body*@
        <MudContainer>
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>
@code {
    private List<NotificationMessages> allNotificationMgs = new List<NotificationMessages>();
    private List<NotificationMessages> currentUserMsgList = new List<NotificationMessages>();
    private NotificationMessages notificationMessage = new NotificationMessages();
    private HubConnection hubConnection;
    private string BoxCss = "none";
    public bool IsConnected =>
      hubConnection?.State == HubConnectionState.Connected;

    private List<NotificationMessages> GetNotificationMessages()
    {
        allNotificationMgs = _NotificationMessagesRepository.GetMessages();
        return allNotificationMgs;
    }
    private void NotificationHideShoe()
    {
        if (BoxCss == "none") BoxCss = "block";
        else BoxCss = "none";
    }
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GetNotificationMessages();

        }

        return base.OnAfterRenderAsync(firstRender);
    }
}