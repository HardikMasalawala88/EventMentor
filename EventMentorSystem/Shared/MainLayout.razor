@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Identity;
@inherits LayoutComponentBase
@inject INotificationMessagesRepository _NotificationMessagesRepository;
@inject NavigationManager _NavigationManager
<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <CascadingValue Value="_parameters" Name="cascadeParameters">
        <MudAppBar Elevation="1">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            <MudText Typo="Typo.h5" Class="ml-3">Event Mentor</MudText>
            <MudSpacer />
            <MudBadge Content="@allNotificationMgs.Count()" Color="Color.Dark" Overlap="true" Class="mx-6 my-4 cursor-pointer">
                <MudIconButton @onclick="NotificationHideShow" Icon="@Icons.Material.Filled.Notifications" Color="Color.Secondary" />
            </MudBadge>
            <div class='ikrNotifications' style="display:@BoxCss !important">
                <h3>Notifications (<span class='notiCounterOnHead'>@count</span>)</h3>
                <div class='ikrNotificationItems' style="color:black">
                    @foreach (var nmobj in allNotificationMgs)
                    {
                        <div class='ikrsingleNotiDiv' notiId="@nmobj.Id">
                            <h4 class='ikrNotiFromPropName'>Title : @nmobj.Title</h4>
                            <h5 class='ikrNotificationTitle'>Message :@nmobj.Message</h5>
                            <div class='ikrNotiCreatedDate'>@nmobj.CreatedOn</div>
                        </div>

                    }
                </div>
                <div class="ikrSeeAll"><a href="#">see all</a></div>
            </div>

            @*<MudIconButton Icon="@Icons.Material.Filled.Logout" Color="Color.Inherit" Edge="Edge.End" @onclick="Logout" />*@
            <MudMenu Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopCenter">
                <MudMenuItem Icon="@Icons.Material.Filled.Logout" OnClick="Logout">Logout</MudMenuItem>
            </MudMenu>
        </MudAppBar>
        <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
            <NavMenu />
        </MudDrawer>
        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
                @Body
            </MudContainer>
        </MudMainContent>
    </CascadingValue>
</MudLayout>

@code {
    [Inject]
    public AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    [Inject] UserManager<User> UserManager { get; set; }
    [Inject] SignInManager<User> signInManager { get; set; }
    private readonly GlobalParameter _parameters = new();
    private bool isUserLoggedIn = false;
    private List<NotificationMessages> allNotificationMgs = new List<NotificationMessages>();
    private NotificationMessages notificationMessage = new NotificationMessages();
    //private HubConnection hubConnection;
    private string BoxCss = "none";
    public bool IsConnected => _parameters.hubConnection?.State == HubConnectionState.Connected;
    private string authMessage;
    private int count;
    private string surname;
    private string Userid;
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();
    bool _drawerOpen = true;
    protected override async Task OnInitializedAsync()
    {
        _parameters.hubConnection = new HubConnectionBuilder()
.WithUrl(_NavigationManager.ToAbsoluteUri("/chathub"))
.Build();

        _parameters.hubConnection.On<NotificationMessages>("SendMessage", async (notificationMessages) =>
        {
            await RefreshNotification();
            InvokeAsync(StateHasChanged);
        });

        await _parameters.hubConnection.StartAsync();
    }
    protected override async Task OnParametersSetAsync()
    {

        await RefreshNotification();
        StateHasChanged();
        AuthenticationState authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (authState.User.Identity is { IsAuthenticated: false })
        {
            isUserLoggedIn = false;
            RedirectToLogin();
        }
        else
        {
            string nameIdentifier = authState.User.Identity.Name;
            if (!string.IsNullOrEmpty(nameIdentifier))
            {
                isUserLoggedIn = true;
                string userId = string.Empty;
                var userIdClaim = authState.User.Claims.Where(c => c.Type == "UserId").FirstOrDefault();
                var roleClaim = authState.User.Claims.Where(c => c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role").FirstOrDefault();
                if (userIdClaim != null)
                {
                    userId = userIdClaim.Value;
                }
                else
                {
                    var claim = authState.User.Claims.Where(c => c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier").FirstOrDefault();
                    if (claim != null)
                    {
                        userId = claim.Value;
                    }
                }

                if (string.IsNullOrEmpty(userId))
                {
                    RedirectToLogin();
                }

                if (string.IsNullOrEmpty(_parameters.UserId))
                {
                    await FetchUserData(userId);
                }
            }
            else
            {
                RedirectToLogin();
            }
        }
    }


    private async Task FetchUserData(string userId)
    {
        try
        {
            
            _parameters.UserId = userId;
            _parameters.LoggedInUser = await UserManager.FindByIdAsync(userId);
        }
        catch (Exception ex)
        {

            throw;
        }
    }



    private void RedirectToLogin()
    {

        _NavigationManager.NavigateTo($"/identity/account/login");
    }


    private void NotificationHideShow()
    {
        if (BoxCss == "none") BoxCss = "block";
        else BoxCss = "none";
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task Logout()
    {
        //
        _NavigationManager.NavigateTo($"/identity/account/logout", true);
    }

    private async Task RefreshNotification()
    {
        allNotificationMgs = new List<NotificationMessages>();

        if (_parameters is not null && !string.IsNullOrEmpty(_parameters.UserId))
            allNotificationMgs = await _NotificationMessagesRepository.GetMessages(_parameters.UserId);

        allNotificationMgs.Reverse();
        count = allNotificationMgs.Count();
    }

}
