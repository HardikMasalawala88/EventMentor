@using EMS.DB.Models
@using EMS.DB.Constant
@using  EMS.DB.Repository.Interface
@using System.Net
@using System.Net.Mail
@inject IEventRepository _EventRepository;
@inject ISnackbar Snackbar;
@inject IEventCategoryRepository _EventCategoryRepository;
@inject IOperatorRepository _OperatorRepository;
@inject IInquiryRepository _InquiryRepository;
@inject INotificationMessagesRepository _NotificationMessagesRepository;
@inject IDialogService DialogService
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager _NavigationManager
<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem lg="4" md="4" xs="12">
                <MudTextField @bind-Value="eventModel.EventName" Label="Event Name" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
            </MudItem>
            <MudItem lg="4" md="4" xs="12">
                <MudTextField @bind-Value="eventModel.OperatorId" Label="OperatorName" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
            </MudItem>
            <MudItem lg="4" md="4" xs="12">
                <MudTextField @bind-Value="eventModel.EventVenue" Label="Event Venue" Variant="Variant.Outlined" Margin="Margin.Normal" ReadOnly="isReadOnly"></MudTextField>
            </MudItem>
            <MudItem lg="4" md="4" xs="12">
                <MudTextField @bind-Value="eventModel.OrganizerName" Label="Organizer Name" Variant="Variant.Outlined" Margin="Margin.Normal" ReadOnly="isReadOnly"></MudTextField>
            </MudItem>
            <MudItem lg="4" md="4" xs="12">
                <MudTextField Class="mt-0" @bind-Value="eventModel.OrganizerContact" Label="Organizer Contact" Variant="Variant.Outlined" Margin="Margin.Normal" ReadOnly="isReadOnly"></MudTextField>
            </MudItem>
            <MudItem lg="4" md="4" xs="12">
                <MudTextField Class="mt-0" @bind-Value="eventModel.Email" Label="Organizer Contact" Variant="Variant.Outlined" Margin="Margin.Normal" ReadOnly="isReadOnly"></MudTextField>
            </MudItem>
            <MudItem lg="4" md="4" xs="12">
                <MudSelect @bind-Value="@eventModel.SlotType" Class="m-0" T="string" Label="slot" Variant="Variant.Outlined" ReadOnly="isReadOnly">
                    <MudSelectItem Value="@(EventSlotType.Morning.ToString())" />
                    <MudSelectItem Value="@(EventSlotType.Evening.ToString())" />
                    <MudSelectItem Value="@(EventSlotType.FullDay.ToString())" />
                    <MudSelectItem Value="@(EventSlotType.MultipleDay.ToString())" />
                </MudSelect>
            </MudItem>
            <MudItem lg="2" md="3" xs="12">
                <MudDatePicker Label="From Date" @bind-Date="eventModel.FromDate" DateFormat="dd.MM.yyyy" Variant="Variant.Outlined" ReadOnly="isReadOnly" />
            </MudItem>
            @if (eventModel.SlotType == EventSlotType.MultipleDay.ToString())
            {
                <MudItem lg="2" md="3" xs="12">
                    <MudDatePicker Label="To Date" @bind-Date="eventModel.Todate" DateFormat="dd.MM.yyyy" Variant="Variant.Outlined" ReadOnly="isReadOnly" />
                </MudItem>
            }
            <MudItem lg="4" md="4" xs="12">
                <MudSelect @bind-Value="eventModel.CategoryId" T="long" SelectedValuesChanged="@(e => OnEventCategoryChange(e.FirstOrDefault()))" Label="select categorys" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var eventCategory in EventCategoryList)
                    {
                        <MudSelectItem Value="@eventCategory.Id">@eventCategory.CategoryName</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem lg="4" md="4" xs="12">

            </MudItem>
            <MudItem lg="4" md="4" xs="12">
                <MudSwitch @bind-Checked="eventModel.IsApproved" Label="Approved?" Color="Color.Primary" />
                <MudSwitch @bind-Checked="eventModel.Ispaymentdone" Label="Payment done?" Color="Color.Primary" />
            </MudItem>
            <MudItem lg="12" md="12" xs="12">
                <MudTextField T="string" Label="Description" Variant="Variant.Outlined" @bind-Text="eventModel.Description" Lines="5" />
            </MudItem>
        </MudGrid>

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CancelForm" Variant="Variant.Filled" Color="Color.Error">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Save" Variant="Variant.Filled">Add</MudButton>
    </DialogActions>
</MudDialog>
@code {


    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public Inquiry InquiryModel { get; set; } = new Inquiry();
    [Parameter] public Event EventModel { get; set; } = new Event();
    [Parameter]
    public GlobalParameter _parameters { get; set; }
    public NotificationMessages NotificationMessagesModel { get; set; } = new NotificationMessages();
    private List<EventCategory> EventCategoryList = new();
    private List<Event> eventList = new();
    private bool isReadOnly = false;
    private Inquiry inquiryModel = new();
    private Event eventModel = new();
    private NotificationMessages NotificationMessageModel = new();
    private List<CategoryService> ServiceList = new();
    private List<Inquiry> inquiryList = new();
    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

    private List<Inquiry> GetLists()
    {
        inquiryList = _InquiryRepository.GetLists();
        return inquiryList;
    }
    private void GetEventCategoryList()
    {
        EventCategoryList = _EventCategoryRepository.GetList();
    }

    public void OnEventCategoryChange(long selectedEventCategoryId)
    {
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            eventModel.OrganizerName = inquiryModel.Fullname;
            eventModel.SlotType = inquiryModel.SlotType;
            eventModel.Email = inquiryModel.Email;
            eventModel.OrganizerContact = inquiryModel.MobileNo;
            eventModel.CategoryId = inquiryModel.EventCategoryId;
            eventModel.FromDate = inquiryModel.FromDate;
            eventModel.Todate = inquiryModel.ToDate;
            eventModel.Description = inquiryModel.Additionalnotes;
            eventModel.EventVenue = string.Concat(inquiryModel.AddressLine1 + "," + inquiryModel.AddressLine2 + "," + inquiryModel.Landmark + "," + inquiryModel.City + "," + inquiryModel.State + ".");
            eventModel.InquiryId = inquiryModel.Id;
            GetEventCategoryList();
            //GetCategoryServices();
            StateHasChanged();

        }

        return base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnInitialized()
    {
        if (InquiryModel is not null && InquiryModel.Id > 0)
        {
            isReadOnly = true;
        }

        inquiryModel = InquiryModel;
        eventModel = EventModel;
        base.OnInitialized();
    }


    #region Private Methods

    private List<Event> GetAllevents()
    {
        eventList = _EventRepository.GetList();
        return eventList;
    }
    public List<Operator> operatorlist = new();
    public string name { get; set; }
    private void Operatorname()
    {
        operatorlist = _OperatorRepository.GetById(eventModel.OperatorId);
        foreach (var data in operatorlist)
        {
            name = data.User.FullName;
        }
    }
    private async Task Save()
    {
        try
        {

            _EventRepository.Insert(eventModel);
            Snackbar.Add(" record saved", Severity.Success);
            Sendmail(eventModel.Email);
            NotificationMessagesModel.Message = $"Add Event  {eventModel.EventName}: By {name}.";
            NotificationMessagesModel.Title = "add Event";
            NotificationMessagesModel.UserId = _parameters.UserId;
            NotificationMessagesModel.EventId = eventModel.Id;
            await _NotificationMessagesRepository.InsertAsync(NotificationMessagesModel);
            await _parameters.hubConnection.SendAsync("SendMessage", NotificationMessagesModel);
            GetAllevents();
            eventModel = new Event();
            MudDialog.Close();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

    }

    private void CancelForm()
    {
        MudDialog.Close(DialogResult.Ok(true));
        inquiryModel = new Inquiry();
    }
    private void Sendmail(string email)
    {
        try
        {
            using (MailMessage mail = new MailMessage())
            {
                mail.From = new MailAddress("baruwalaom@gmail.com");
                mail.To.Add(@email);
                mail.Subject = "this is test1.";
                mail.Body = "<h1>this is demo link</h1>" +
                        "<a href='https://localhost:44304/eventlist'>Visit your event detail.</a>";
                mail.IsBodyHtml = true;

                using (SmtpClient smtp = new SmtpClient("smtp.gmail.com", 587))
                {
                    smtp.Credentials = new NetworkCredential("baruwalaom@gmail.com", "nyjagskbmgrqvkkb");
                    smtp.EnableSsl = true;
                    smtp.Send(mail);
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
    }
    #endregion


}