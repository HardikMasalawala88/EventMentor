@using EMS.DB.Models
@using EMS.DB.Constant
@using  EMS.DB.Repository.Interface
@inject IEventRepository _EventRepository;
@inject ISnackbar Snackbar;
@inject IEventCategoryRepository _EventCategoryRepository;
@inject IInquiryRepository _InquiryRepository;
@inject IDialogService DialogService
<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem lg="4" md="4" xs="12">
                <MudTextField @bind-Value="eventModel.EventName" Label="Event Name" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
            </MudItem>
            <MudItem lg="4" md="4" xs="12">
                <MudTextField @bind-Value="eventModel.OperatorName" Label="OperatorName" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
            </MudItem>
            <MudItem lg="4" md="4" xs="12">
                <MudTextField @bind-Value="eventModel.EventVenue" Label="Event Venue" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
            </MudItem>
            <MudItem lg="4" md="4" xs="12">
                <MudTextField @bind-Value="eventModel.OrganizerName" Label="Organizer Name" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
            </MudItem>
            <MudItem lg="4" md="4" xs="12">
                <MudTextField Class="mt-0" @bind-Value="eventModel.OrganizerContact" Label="Organizer Contact" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
            </MudItem>
            <MudItem lg="2" md="3" xs="12">
                <MudDatePicker Label="From Date" @bind-Date="eventModel.FromDate" DateFormat="dd.MM.yyyy" />
            </MudItem>
            <MudItem lg="2" md="3" xs="12">
                <MudDatePicker Label="To Date" @bind-Date="eventModel.Todate" DateFormat="dd.MM.yyyy" />
            </MudItem>

            <MudItem lg="3" md="4" xs="12">
                <MudSelect @bind-Value="eventModel.CategoryId" T="long" Label="select categorys" Class="mt-0" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var eventCategory in EventCategoryList)
                    {
                        <MudSelectItem Value="@eventCategory.Id">@eventCategory.CategoryName</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            
            <MudItem lg="4" md="4" xs="12">
                @*<MudTextField @bind-Value="eventModel.IsApproved" Label="Approved ?" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>*@
                <MudSwitch @bind-Checked="eventModel.IsApproved" Label="Approved?" Color="Color.Primary" />
                <MudSwitch @bind-Checked="eventModel.Ispaymentdone" Label="Payment done?" Color="Color.Primary" />
            </MudItem>
            <MudItem lg="12" md="12" xs="12">
                <MudTextField T="string" Label="Description" Variant="Variant.Outlined" @bind-Text="eventModel.Description" Lines="5" />
            </MudItem>
        </MudGrid>

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CancelForm" Variant="Variant.Filled" Color="Color.Error">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Save" Variant="Variant.Filled">Add</MudButton>
    </DialogActions>
</MudDialog>
@code {


    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public Inquiry InquiryModel { get; set; } = new Inquiry();
    [Parameter] public Event EventModel { get; set; } = new Event();
    private List<EventCategory> EventCategoryList = new();
    private List<Event> eventList = new();
    private bool isReadOnly = false;
    private Inquiry inquiryModel = new();
    private Event eventModel = new();
    private List<Inquiry> inquiryList = new();
    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

    private List<Inquiry> GetLists()
    {
        inquiryList = _InquiryRepository.GetLists();
        return inquiryList;
    }
    private void GetEventCategoryList()
    {
        EventCategoryList = _EventCategoryRepository.GetList();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            eventModel.OrganizerName = inquiryModel.Fullname;
            eventModel.OrganizerContact = inquiryModel.MobileNo;
            eventModel.FromDate = inquiryModel.FromDate;
            eventModel.Todate = inquiryModel.ToDate;
            eventModel.Description = inquiryModel.Additionalnotes;
            eventModel.EventVenue = string.Concat(inquiryModel.AddressLine1 + "," + inquiryModel.AddressLine2 + "," + inquiryModel.Landmark + "," + inquiryModel.City + "," + inquiryModel.State + ".");
            eventModel.InquiryId = inquiryModel.Id;
            GetEventCategoryList();
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnInitialized()
    {
        if (InquiryModel is not null && InquiryModel.Id > 0)
        {
            isReadOnly = true;
        }

        inquiryModel = InquiryModel;
        eventModel = EventModel;
        base.OnInitialized();
    }


    #region Private Methods

    private List<Event> GetAllevents()
    {
        eventList = _EventRepository.GetList();
        return eventList;
    }

    private void Save()
    {
        try
        {
            _EventRepository.Insert(eventModel);
            Snackbar.Add(" record saved", Severity.Success);
            GetAllevents();
            eventModel = new Event();
            MudDialog.Close();

        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

    }

    private void CancelForm()
    {
        MudDialog.Close(DialogResult.Ok(true));
        inquiryModel = new Inquiry();
    }
    #endregion

}