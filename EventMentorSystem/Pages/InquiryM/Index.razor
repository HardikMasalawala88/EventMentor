@page "/Inqurylist"
@using EMS.DB.Models
@using EMS.DB.Service.Interface
@using System.Globalization
@using EMS.DB.Constant


@inject IInquiryService _inquiryService;
@inject IDialogService DialogService

<h1>Inquiry Listing</h1>


<MudTable Elevation="25" Items="GetAllinquiry()"  Filter="new Func<Inquiry, bool>(Search)" @bind-customer="inquiryList" >
    <ToolBarContent>
        <MudText Typo="Typo.h6">Inquiry list</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Immediate="true" Placeholder="Search for Event..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Action</MudTh>
       
        <MudTh>Fullname</MudTh>
        <MudTh>MobileNo</MudTh>
        <MudTh>AltPhoneNo</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>NoOfAttendee</MudTh>
        <MudTh>AddressLine1</MudTh>
        <MudTh>AddressLine2</MudTh>
        <MudTh>Landmark</MudTh>
        <MudTh>Pincode</MudTh>
        <MudTh>City</MudTh>
        <MudTh>State</MudTh>
        <MudTh>SlotType</MudTh>
        <MudTh>FromDate</MudTh>
        <MudTh>ToDate</MudTh>
       
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="">

         
            <MudFab @onclick="@(() => OpenDialog(context))"  Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small">
                edit
            </MudFab>
            <MudFab @onclick="@(()=>Delete(@context.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
        
        <MudTd DataLabel="Event Name">@context.Fullname</MudTd>
        <MudTd DataLabel="">@context.MobileNo</MudTd>
        <MudTd DataLabel="">@context.AltPhoneNo</MudTd>
        <MudTd DataLabel="">@context.Email</MudTd>
        <MudTd DataLabel="">@context.NoOfAttendee</MudTd>
        <MudTd DataLabel="">@context.AddressLine1</MudTd>
        <MudTd DataLabel="">@context.AddressLine2</MudTd>
        <MudTd DataLabel="">@context.Landmark</MudTd>
        <MudTd DataLabel="">@context.Pincode</MudTd>
        <MudTd DataLabel="">@context.City</MudTd>
        <MudTd DataLabel="">@context.State</MudTd>
        <MudTd DataLabel="">@context.SlotType</MudTd>
        <MudTd DataLabel="">@context.FromDate</MudTd>
        <MudTd DataLabel="">@context.ToDate</MudTd>
        <MudTd DataLabel="">@context.Additionalnotes</MudTd>

    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 5,10,20,50}" />
    </PagerContent>

</MudTable>


@code{
    private string searchString = "";
    private Inquiry inquiryModel = new();

    private List<Inquiry> inquiryList = new();


    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GetAllinquiry();
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    private List<Inquiry> GetAllinquiry()
    {
        inquiryList = _inquiryService.GetLists();
        return inquiryList;
    }

    private bool Search(Inquiry inquiry)
    {
        if (StringValid(inquiry.Fullname)
            && StringValid(inquiry.MobileNo)
            && StringValid(inquiry.AltPhoneNo)
            && StringValid(inquiry.Email)
            && StringValid(inquiry.AddressLine1)
            && StringValid(inquiry.Landmark)
            && StringValid(inquiry.AddressLine2)
            && StringValid(inquiry.Pincode)
            && StringValid(inquiry.City)
            && StringValid(inquiry.State)
            && StringValid(inquiry.SlotType)
            &&
            inquiry.Fullname.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || inquiry.MobileNo.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || inquiry.AltPhoneNo.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || inquiry.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || inquiry.AddressLine1.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || inquiry.AddressLine2.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || inquiry.Pincode.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || inquiry.City.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || inquiry.State.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || inquiry.SlotType.Contains(searchString, StringComparison.OrdinalIgnoreCase)

            )
        {
            return true;
        }

        return false;
    }

    private bool StringValid(string strValue)
    {
        if (!string.IsNullOrEmpty(strValue))
        {
            return true;
        }

        return false;
    }

    private void Save()
    {
        _inquiryService.Insert(inquiryModel);

        GetAllinquiry();

        inquiryModel = new Inquiry();
    }

    private void ShowAddForm()
    {
        inquiryModel = new Inquiry();

    }

    private void Edit(long id)
    {

        inquiryModel = inquiryList.FirstOrDefault(c => c.Id == id);
    }

    private void CancelForm()
    {

        inquiryModel = new Inquiry();
    }

    private void Delete(long id)
    {
        _inquiryService.Delete(id);
        GetAllinquiry();
    }

   

    private void OpenDialog(Inquiry inquiry)
    {

        var parameters = new DialogParameters();
        parameters.Add("InquiryModel", inquiry);
        var options = new DialogOptions() { CloseOnEscapeKey = false,
            CloseButton = true, MaxWidth = MaxWidth.Large,
            Position=DialogPosition.TopCenter,
            DisableBackdropClick = true
        };

        DialogService.Show<AddInquiryDialog>("Edit Inquiry", parameters, options);

    }


}