@page "/ViewStaffwork"
@using EMS.DB.Models
@using  EMS.DB.Repository.Interface
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject IEventStaffWorkRepository _EventStaffWorkRepository;
@inject ISnackbar Snackbar;
@inject IDialogService DialogService;
@using EMS.DB.Constant
<AuthorizeView Roles="Admin" Context="data">
    <Authorized>
        @if (IsEdit)
        {
<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Work Update</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudItem>
            <MudSelect T="String" @bind-Value="@EventStaffWorkModel.Status" Label="Status" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem Value="@(Status.Workpending.ToString())" />
                <MudSelectItem Value="Status.WorkOnProcess.ToString()" />
                <MudSelectItem Value="Status.WorkFinish.ToString()" />
            </MudSelect>
        </MudItem>
        <MudItem Class="d-flex justify-end">
            <MudButton Class="mx-1 m-1" Variant="Variant.Filled" Color="Color.Error" OnClick="CancelForm">
                <FontLabel Fontweight="500">Cancel</FontLabel>
            </MudButton>
            <MudButton Class="mx-1 m-1" Variant="Variant.Filled" Color="Color.Primary" OnClick="Save">
                <FontLabel Fontweight="500">Update</FontLabel>
            </MudButton>
        </MudItem>
    </MudCardContent>
</MudCard>}

        <MudTable Elevation="25" @ref="tableRef" ServerData="@(new Func<TableState, Task<TableData<EventStaffWork>>>(ServerReload))" T="EventStaffWork" Filter="new Func<EventStaffWork, bool>(Search)" Class="w-100" @bind-customer="EventStaffWorkList">
            <ToolBarContent>
                <MudText Typo="Typo.h6"> list</MudText>
                <MudSpacer />
                <MudTextField Value="searchString" T="string" ValueChanged="@(s=> OnSearch(s))" Immediate="true" Placeholder="Search for Work..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Action</MudTh>
                <MudTh>Id</MudTh>
                <MudTh>Event Name</MudTh>
                <MudTh>Event Venue</MudTh>
                <MudTh>From Date</MudTh>
                <MudTh>Slot</MudTh>
                <MudTh>Service</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Status</MudTh>
            </HeaderContent>
            <RowTemplate>

                <MudTd>
                    <MudFab @onclick="@(() => OpenDialog(context))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small">
                        edit
                    </MudFab>
                </MudTd>
                @*<MudTd >
                    <MudFab @onclick="@(()=>Edit(@context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />*
                    </MudTd>*@

                <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="Id">@context.Event.EventName</MudTd>
                <MudTd DataLabel="Id">@context.Event.EventVenue</MudTd>
                <MudTd DataLabel="Id">@context.Event.FromDate</MudTd>
                <MudTd DataLabel="Id">@context.Event.SlotType</MudTd>
                <MudTd DataLabel="Id">@context.Service</MudTd>
                <MudTd DataLabel="Id">@context.Description</MudTd>
                <MudTd DataLabel="Id">@context.Status</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 5,10,20,50}" />
            </PagerContent>
        </MudTable>
    </Authorized>
    <NotAuthorized>
        <MudAlert Severity="Severity.Error">please <MudLink Href="/login">login</MudLink></MudAlert>
    </NotAuthorized>
</AuthorizeView>


@code{ private string searchString = "";
    private List<EventStaffWork> EventStaffWorkList = new();
    private EventStaffWork EventStaffWorkModel = new();
    private MudTable<EventStaffWork> tableRef;
    private IEnumerable<EventStaffWork> pagedData;
    private bool IsEdit;
    private bool IsAdd;
    private bool IsStatus;
    private int totalItems;
    private int totalItemsOperator;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GetAllEventStaffWork();
        }

        return base.OnAfterRenderAsync(firstRender);
    }
    private List<EventStaffWork> GetAllEventStaffWork()
    {
        EventStaffWorkList = _EventStaffWorkRepository.GetEventStaffWorkList();
        return EventStaffWorkList;
    }
    private void Save()
    {
        try
        {
            _EventStaffWorkRepository.Update(EventStaffWorkModel);
            Snackbar.Add(" record Update sucessfull", Severity.Success);
            //GetAllEventStaffWork();
            tableRef.ReloadServerData();
            EventStaffWorkModel = new EventStaffWork();
            IsEdit = false;
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private bool Search(EventStaffWork EventStaffWorks)
    {
        if (string.IsNullOrEmpty(searchString) || !string.IsNullOrEmpty(searchString)
            && StringValid(EventStaffWorks.Service)
            && StringValid(EventStaffWorks.Description)
            && StringValid(EventStaffWorks.Status)
            &&
            EventStaffWorks.Service.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || EventStaffWorks.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || EventStaffWorks.Status.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        return false;
    }
    private bool StringValid(string strValue)
    {
        if (!string.IsNullOrEmpty(strValue))
        {
            return true;
        }

        return false;
    }

    private async Task<TableData<EventStaffWork>> ServerReload(TableState state)
    {
        IEnumerable<EventStaffWork> data;

        //get all data of current month
        data = _EventStaffWorkRepository.GetEventStaffWorkList();

        data = data.Where(selectedModel => { return Search(selectedModel); }).ToArray();
        data = data.OrderByDirection(state.SortDirection, o => o.Event.FromDate.Value);
        totalItemsOperator = data.Count();

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<EventStaffWork>() { TotalItems = totalItemsOperator, Items = pagedData };
    }

    private void CancelForm()
    {
        try
        {
            IsEdit = false;
            IsAdd = false;
            EventStaffWorkModel = new EventStaffWork();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
    private void Edit(long id)
    {

        try
        {
            EventStaffWorkModel = EventStaffWorkList.FirstOrDefault(c => c.Id == id);
            IsEdit = true;
            tableRef.ReloadServerData();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
    private void OpenDialog(EventStaffWork EventStaffWork)
    {

        var parameters = new DialogParameters();
        parameters.Add("EventStaffWorkModel", EventStaffWork);
        var options = new DialogOptions()
        {
            CloseOnEscapeKey = false,
            CloseButton = true,
            MaxWidth = MaxWidth.Large,
            Position = DialogPosition.TopCenter,
            DisableBackdropClick = true

        };

        DialogService.Show<StaffWorkProcess>("Work Status", parameters, options);

    }
    private void OnSearch(string text)
    {
        searchString = text;
        tableRef.ReloadServerData();

    } }
