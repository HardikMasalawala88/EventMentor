@using EMS.DB.Models
@using  EMS.DB.Repository.Interface
@inject IPaymentRepository _PaymentRepository;
@inject IEventRepository _EventRepository;
@inject IUserRepository _UserRepository;
@inject INotificationMessagesRepository _NotificationMessagesRepository;
@inject ISnackbar Snackbar;
@inject NavigationManager NavigationManager;

<EditForm Model="@PaymentModel" OnValidSubmit="Edit">
    <DataAnnotationsValidator />
    <MudDialog>
        <DialogContent>
            <MudTextField @bind-Value="PaymentModel.PaymentMode" For="@(() => PaymentModel.PaymentMode)" Label="Payment Mode" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="PaymentModel.TotalAmount" For="@(() => PaymentModel.TotalAmount)" Label="Total Amount" Variant="Variant.Outlined" Margin="Margin.Normal" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.CurrencyRupee" AdornmentColor="Color.Warning"></MudTextField>
            <MudTextField @bind-Value="PaymentModel.ReceivedAmount" For="@(() => PaymentModel.ReceivedAmount)" Label="Received Amount" Variant="Variant.Outlined" Margin="Margin.Normal" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.CurrencyRupee" AdornmentColor="Color.Warning"></MudTextField>
            @if (!string.IsNullOrEmpty(PaymentModel.TotalAmount) && !string.IsNullOrEmpty(PaymentModel.ReceivedAmount))
            {
                long demo = Convert.ToInt64(PaymentModel.TotalAmount) - Convert.ToInt64(PaymentModel.ReceivedAmount);
                PaymentModel.RemainingAmount = Convert.ToString(demo);
            }
            <MudTextField @bind-Value="PaymentModel.RemainingAmount" For="@(() => PaymentModel.RemainingAmount)" Label="Remaining Amount " Variant="Variant.Outlined" Margin="Margin.Normal" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.CurrencyRupee" AdornmentColor="Color.Warning"></MudTextField>
            <MudTextField @bind-Value="PaymentModel.Transactionid" For="@(() => PaymentModel.Transactionid)" Label="Transaction Id" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="PaymentModel.Description" For="@(() => PaymentModel.Description)" Label="Description" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
            <MudSelect @bind-Value="PaymentModel.EventId" For="@(() => PaymentModel.EventId)" T="long" Label="select Event" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" ReadOnly="true">
                @foreach (var events in GetAllEvent())
                {
                    <MudSelectItem Value="@events.Id">@events.EventName</MudSelectItem>
                }
            </MudSelect>
            <MudSelect @bind-Value="PaymentModel.UserId" For="@(() => PaymentModel.UserId)" Label="User name" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                @foreach (var events in GetAllUser())
                {
                    <MudSelectItem Value="@events.Id">@events.UserName</MudSelectItem>
                }
            </MudSelect>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Class="mx-1" Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">
                <FontLabel Fontweight="500" FontColor="white">Add</FontLabel>
            </MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

    @code {
        [CascadingParameter] MudDialogInstance MudDialog { get; set; }
        [Parameter] public string EventId { get; set; }
        [Parameter]
        public GlobalParameter _parameters { get; set; }
        private Payment PaymentModel = new();
        private bool isReadOnly = false;
        private List<Event> EventList = new();
        private List<User> userList = new();
        public NotificationMessages NotificationMessagesModel { get; set; } = new NotificationMessages();

        private HubConnection hubConnection;
        protected override async Task OnInitializedAsync()
        {

            hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();
            hubConnection.On<Payment>("PaymentAddUpdate", (Payments) =>
            {
                InvokeAsync(StateHasChanged);
            });

            await hubConnection.StartAsync();

        }

        protected override void OnInitialized()
        {
            PaymentModel.UserId = _parameters.UserId;
            PaymentModel.EventId = Convert.ToInt64(EventId);
            base.OnInitialized();
        }
        private List<Event> GetAllEvent()
        {
            EventList = _EventRepository.GetList();
            return EventList;
        }
        private List<User> GetAllUser()
        {
            userList = _UserRepository.GetAllUser();
            return userList;
        }

        private async Task Edit()
        {
            try
            {
                _PaymentRepository.Insert(PaymentModel);
                NotificationMessagesModel.Message = $"Add Event  {PaymentModel.EventId}: By {PaymentModel.UserId}.";
                NotificationMessagesModel.Title = "add category";
                NotificationMessagesModel.UserId = _parameters.UserId;
                NotificationMessagesModel.EventId = PaymentModel.EventId;
                await _NotificationMessagesRepository.InsertAsync(NotificationMessagesModel);
                await _parameters.hubConnection.SendAsync("SendMessage", NotificationMessagesModel);
                await hubConnection.SendAsync("PaymentAddUpdate", PaymentModel);
                Snackbar.Add("payment update", Severity.Success);
                PaymentModel = new Payment();
            }
            catch (Exception ex)
            {
                _parameters.ShowErrorMessages(ex);
            }
        }
        void Cancel() => MudDialog.Cancel();
    }
