@page "/"
@*@using Microsoft.AspNetCore.SignalR.Client
@using EventMentorSystem.Data
@inject NavigationManager _NavigationManager
notification
<div id="noti_Container">
    <div class='ikrNoti_Counter'>@currentUserMsgList.Count()</div>
    <div class='ikrNoti_Button' style="background: #2E467C;" @onclick="NotificationHideShoe"></div>
    <div class='ikrNotifications' style="display:@BoxCss !important" @onclick="NotificationHideShoe">
        <h3>Notifications (<span class='notiCounterOnHead'>@currentUserMsgList.Count()</span>)</h3>
        <div class='ikrNotificationItems'>
            @foreach (var nmobj in currentUserMsgList)
            {
                <div class='ikrsingleNotiDiv' notiId="@nmobj.MsgId">
                    <h4 class='ikrNotiFromPropName'>Sender : @nmobj.SenderName</h4>
                    <h5 class='ikrNotificationTitle'>@nmobj.MsgTitle</h5>
                    <div class='ikrNotificationBody'>@nmobj.MsgBody</div>
                    <div class='ikrNotiCreatedDate'>@nmobj.MsgDate</div>
                </div>
            }
        </div>
        <div class="ikrSeeAll"><a href="#">see all</a></div>
    </div>
</div>

Sending Messge
<br />
<br />
<MudTextField @bind-Value="notificationMessage.SenderName" Label="SenderName" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
<MudTextField @bind-Value="notificationMessage.ReceiverName" Label="ReceiverName" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
<MudTextField @bind-Value="notificationMessage.MsgTitle" Label="MsgTitle" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
<MudTextField @bind-Value="notificationMessage.MsgBody" Label="MsgBody" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
<br/>
<MudButton Variant="Variant.Filled" OnClick="Send" Color="Color.Primary">Primary</MudButton>

@code{
    private List<NotificationMessage> allNotificationMgs = new List<NotificationMessage>();
    private List<NotificationMessage> currentUserMsgList = new List<NotificationMessage>();
    private NotificationMessage notificationMessage = new NotificationMessage();
    private HubConnection hubConnection;
    private string BoxCss = "none";
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(_NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string, string, string>("ReceiveMessage", (sendname, receivername, title, message) =>
        {
            allNotificationMgs.Add(new NotificationMessage()
            {
                MsgId = allNotificationMgs.Count() + 1,
                SenderName = sendname,
                ReceiverName = receivername,
                MsgTitle = title,
                MsgBody = message

            });
            currentUserMsgList = allNotificationMgs.Where(x => x.SenderName != notificationMessage.SenderName).ToList();
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }
    private async Task Send()
    {
        await hubConnection.SendAsync("sendMessage", notificationMessage.SenderName, notificationMessage.ReceiverName, notificationMessage.MsgTitle, notificationMessage.MsgBody);
        notificationMessage.MsgBody = "";
        notificationMessage.MsgTitle = "";
    }
    public bool IsConnected =>
       hubConnection?.State == HubConnectionState.Connected;

    private void NotificationHideShoe()
    {
        if (BoxCss == "none") BoxCss = "block";
        else BoxCss = "none";
    }

}*@
