@page "/eventlist"
@using EMS.DB.Models
@using  EMS.DB.Repository.Interface
@using EMS.DB.Constant
@using System.Net
@using System.Net.Mail
@inject IEventRepository _EventRepository;
@inject ISnackbar Snackbar;
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IEventCategoryRepository _EventCategoryRepository;
@inject INotificationMessagesRepository _NotificationMessagesRepository;
@inject NavigationManager UriHelper
<AuthorizeView Roles="Admin">
    <Authorized>
        @if (IsEdit || IsAdd)
        {
            <MudCard Elevation="25">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Add / Edit Events</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudItem>
                        <MudTextField @bind-Value="eventModel.EventName" Label="Event Name" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
                        <MudTextField @bind-Value="eventModel.OperatorName" Label="Operator Name" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
                        <MudTextField @bind-Value="eventModel.EventVenue" Label="EventVenue" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
                        <MudTextField @bind-Value="eventModel.OrganizerName" Label="Organizer Name" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
                        <MudTextField @bind-Value="eventModel.Email" Label="Email" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
                        <MudTextField @bind-Value="eventModel.OrganizerContact" Label="Organizer Contact" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
                        <MudRadioGroup @bind-SelectedOption="@eventModel.SlotType">
                            <MudRadio Option="@(EventSlotType.Morning.ToString())" Color="Color.Primary">@EventSlotType.Morning.ToString()</MudRadio>
                            <MudRadio Option="@(EventSlotType.Evening.ToString())" Color="Color.Primary">@EventSlotType.Evening.ToString()</MudRadio>
                            <MudRadio Option="@(EventSlotType.FullDay.ToString())" Color="Color.Primary">@EventSlotType.FullDay.ToString()</MudRadio>
                            <MudRadio Option="@(EventSlotType.MultipleDay.ToString())" Color="Color.Primary">@EventSlotType.MultipleDay.ToString()</MudRadio>
                        </MudRadioGroup>
                        <MudDatePicker Variant="Variant.Outlined" Label="From Date" @bind-Date="eventModel.FromDate" DateFormat="dd.MM.yyyy"  />
                        @if (eventModel.SlotType== EventSlotType.MultipleDay.ToString()) { 
                        <MudDatePicker Variant="Variant.Outlined" Label="To Date" @bind-Date="eventModel.Todate" DateFormat="dd.MM.yyyy" />
                        }
                        <MudTextField @bind-Value="eventModel.Description" Label="Description" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
                        <MudSelect @bind-Value="eventModel.CategoryId" Label="Select categorys" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                            @foreach (var eventCategory in GetEventCategoryList())
                                {
                                <MudSelectItem Value="@eventCategory.Id">@eventCategory.CategoryName</MudSelectItem>

                                }
                        </MudSelect>
                        <MudSwitch @bind-Checked="eventModel.IsApproved" Color="Color.Primary" Label="Approved?" />
                    </MudItem>
                    <MudItem Class="d-flex justify-end">
                        <MudButton Class="mx-1" Variant="Variant.Filled" Color="Color.Error" OnClick="CancelForm">
                            <FontLabel Fontweight="500" FontColor="white">Cancel</FontLabel>
                        </MudButton>
                        <MudButton Class="mx-1" Variant="Variant.Filled" Color="Color.Primary" OnClick="Save">
                            <FontLabel Fontweight="500" FontColor="white">Add</FontLabel>
                        </MudButton>
                    </MudItem>
                </MudCardContent>
            </MudCard>
        }
        else
        {
    <MudItem Class="d-flex justify-end">
        <MudButton Variant="Variant.Filled" Color="Color.Primary " OnClick="ShowAddForm">
            <FontLabel Fontweight="500" FontColor="white">Add</FontLabel>
        </MudButton>
    </MudItem>
        }
        <MudTable Elevation="25" @ref="tableRef" ServerData="@(new Func<TableState, Task<TableData<Event>>>(ServerReload))" T="Event" Filter="new Func<Event, bool>(Search)" Class="w-100" @bind-customer="eventList" OnRowClick="@RowClicked">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Event list</MudText>
                <MudSpacer />
                <MudTextField Value="searchString" T="string" ValueChanged="@(s=> OnSearch(s))" Immediate="true" Placeholder="Search for Event..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Action</MudTh>
                <MudTh>Event(#Id)</MudTh>
                <MudTh>Operator</MudTh>
                <MudTh>Venue</MudTh>
                <MudTh>Organizor(#Contact)</MudTh>
                @*<MudTh>Description</MudTh>*@
                <MudTh>SlotType</MudTh>
                <MudTh>Event date</MudTh>
                <MudTh>Approved</MudTh>
                <MudTh>Payment</MudTh>
                <MudTh>Reference</MudTh>
                <MudTh>Category</MudTh>
            </HeaderContent>
            <RowTemplate Context="data">
                <MudTd DataLabel="">
                    <MudFab @onclick="@(() => Edit(@data))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
                    <MudFab @onclick="@(() => Delete(@data.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
                </MudTd>
                <MudTd DataLabel="Event Name">@(string.Concat("(#", @data.Id,") "))@data.EventName</MudTd>
                <MudTd DataLabel="">@data.OperatorName</MudTd>
                <MudTd DataLabel="">@data.EventVenue</MudTd>
                <MudTd DataLabel="">@data.OrganizerName@(string.Concat("(#", @data.OrganizerContact, ") "))</MudTd>
                <MudTd DataLabel="">@data.SlotType</MudTd>
                <MudTd DataLabel="">
                    @data.FromDate?.ToLongDateString()
                    @if (@data.Todate.HasValue)
                    {
                        @(" To ")
                        @data.Todate?.ToLongDateString()
                    }
                </MudTd>
                <MudTd DataLabel="">
                    @if (data.IsApproved)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" />
                    }
                </MudTd>
                <MudTd DataLabel="">
                    @if (data.Ispaymentdone)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" />
                    }
                </MudTd>
                <MudTd DataLabel="">
                    @if (data.InquiryId > 0)
                    {
                        @("By Inquiry Form")
                    }
                    else
                    {
                        @("By Call")
                    }
                </MudTd>
                <MudTd DataLabel="">
                    @if (@data.Category is not null)
                    {
                        @data.Category.CategoryName
                    }
                    else
                    {
                        @("----")
                    }
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 5,10,20,50}" />
            </PagerContent>
        </MudTable>
    </Authorized>
    <NotAuthorized>
        <MudAlert Severity="Severity.Error">please login Authorize user <MudLink Href="Identity/Account/Login">login</MudLink></MudAlert>
    </NotAuthorized>
</AuthorizeView>
@code{
    [CascadingParameter(Name = "cascadeParameters")]
    public GlobalParameter _parameters { get; set; }
    private string searchString = "";
    private Event eventModel = new();
    private NotificationMessages NotificationMessagesModel = new();
    private MudTable<Event> tableRef;
    private IEnumerable<Event> pagedData;
    private bool IsEdit;
    private bool IsAdd;
    private int totalItems;
    private int totalItemsOperator;
    private List<Event> eventList = new();
    private List<EventCategory> eventcategoryList = new();
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            eventModel.FromDate = DateTime.Today.AddDays(7);
            eventModel.Todate = DateTime.Today.AddDays(7);
            GetAllevents();
        }
        return base.OnAfterRenderAsync(firstRender);
    }
    private List<Event> GetAllevents()
    {
        eventList = _EventRepository.GetList();
        return eventList;
    }
    private bool Search(Event events)
    {
        if (string.IsNullOrEmpty(searchString) || !string.IsNullOrEmpty(searchString) && StringValid(events.EventName)
            && StringValid(events.OperatorName)
            && StringValid(events.EventVenue)
            && StringValid(events.OrganizerName)
            && StringValid(events.OrganizerContact)
            && StringValid(events.Description)
            &&
            events.EventName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || events.OperatorName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || events.EventVenue.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || events.OrganizerName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || events.OrganizerContact.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        return false;
    }
    public void RowClicked(TableRowClickEventArgs<Event> p)
    {
        NavigationManager.NavigateTo($"/EditEvent/{p.Item.Id.ToString()}");
    }
    private bool StringValid(string strValue)
    {
        if (!string.IsNullOrEmpty(strValue))
        {
            return true;
        }
        return false;
    }
    private async Task<TableData<Event>> ServerReload(TableState state)
    {
        IEnumerable<Event> data;
        data = _EventRepository.GetList();
        data = data.Where(selectedModel => { return Search(selectedModel); }).ToArray();
        data = data.OrderByDirection(state.SortDirection, o => o.FromDate.Value);
        totalItemsOperator = data.Count();
        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<Event>() { TotalItems = totalItemsOperator, Items = pagedData };
    }
    private async Task Save()
    {
        try
        {
            _EventRepository.Insert(eventModel);
            Snackbar.Add(" record saved", Severity.Success);
            tableRef.ReloadServerData();
            //Sendmail(eventModel.Email);
            NotificationMessagesModel.Message = $"Add Event  {eventModel.EventName}: By {eventModel.OperatorName}.";
            NotificationMessagesModel.Title = "add Event";
            NotificationMessagesModel.UserId = _parameters.UserId;
            NotificationMessagesModel.EventId = eventModel.Id;
            await _NotificationMessagesRepository.InsertAsync(NotificationMessagesModel);
            await _parameters.hubConnection.SendAsync("SendMessage", NotificationMessagesModel);
            IsEdit = false;
            IsAdd = false;
            eventModel = new Event();

        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
    private void ShowAddForm()
    {
        eventModel = new Event();
        IsAdd = true;
    }
    private void Edit(Event events)
    {
        UriHelper.NavigateTo($"/EditEvent/{events.Id.ToString()}");
        tableRef.ReloadServerData();
    }
    private List<EventCategory> GetEventCategoryList()
    {
        return _EventCategoryRepository.GetList();
    }
    private void CancelForm()
    {
        try
        {
            IsEdit = false;
            IsAdd = false;
            eventModel = new Event();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
    private async Task Delete(long id)
    {
        try
        {

            _EventRepository.Delete(id);
            NotificationMessagesModel.Message = $"delete Event  {eventModel.EventName}: By {eventModel.OperatorName}.";
            NotificationMessagesModel.Title = "delete Event";
            NotificationMessagesModel.UserId = _parameters.UserId;
            NotificationMessagesModel.EventId = eventModel.Id;
            await _NotificationMessagesRepository.InsertAsync(NotificationMessagesModel);
            await _parameters.hubConnection.SendAsync("SendMessage", NotificationMessagesModel);
            Snackbar.Add("Customer Data Deleted.", Severity.Success);
            tableRef.ReloadServerData();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
    private void OnSearch(string text)
    {
        searchString = text;
        tableRef.ReloadServerData();
    }
    private string Message { get; set; } = "";
    private void Sendmail(string email)
    {
        try
        {
            using (MailMessage mail = new MailMessage())
            {
                mail.From = new MailAddress("baruwalaom@gmail.com");
                mail.To.Add(@email);
                mail.Subject = "this is test1.";
                mail.Body = "<h1>this is demo link</h1>" +
                        "<a href='https://localhost:44304/eventlist'>Visit your event detail.</a>";
                mail.IsBodyHtml = true;

                using (SmtpClient smtp = new SmtpClient("smtp.gmail.com", 587))
                {
                    smtp.Credentials = new NetworkCredential("baruwalaom@gmail.com", "nyjagskbmgrqvkkb");
                    smtp.EnableSsl = true;
                    smtp.Send(mail);
                }
            }
            Message = "email was sent successfully!";
        }
        catch (Exception ep)
        {
            Message = "failed to send email with the following error:";
            Message = ep.Message;
        }
    }


}
