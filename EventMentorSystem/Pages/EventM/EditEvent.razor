@using EMS.DB.Models
@using EMS.DB.Constant
@using  EMS.DB.Repository.Interface
@inject IEventRepository _EventRepository;
@inject ISnackbar Snackbar;
<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem lg="4" md="4" xs="12">
                <MudTextField @bind-Value="eventModel.EventName" Class="m-0" Label="Event Name" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
            </MudItem>
            <MudItem lg="4" md="4" xs="12">
                <MudTextField @bind-Value="eventModel.OperatorName" Class="m-0" Label="Operator Name" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
            </MudItem>
            <MudItem lg="4" md="4" xs="12">
                <MudTextField @bind-Value="eventModel.EventVenue" Class="m-0" Label="EventVenue" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
            </MudItem>
            <MudItem lg="4" md="4" xs="12">
                <MudTextField @bind-Value="eventModel.OrganizerName" Class="m-0" Label="Organizer Name" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
            </MudItem>
            <MudItem lg="4" md="4" xs="12">
                <MudTextField @bind-Value="eventModel.OrganizerContact" Class="m-0" Label="Organizer Contact" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
            </MudItem>
            <MudItem lg="4" md="4" xs="12">
                <MudSelect @bind-Value="@eventModel.SlotType"  Class="m-0" T="string" Label="slot" Variant="Variant.Outlined">
                    <MudSelectItem Value="@(EventSlotType.Morning.ToString())"/>
                    <MudSelectItem Value="@(EventSlotType.Evening.ToString())"/>
                    <MudSelectItem Value="@(EventSlotType.FullDay.ToString())"/>
                    <MudSelectItem Value="@(EventSlotType.MultipleDay.ToString())"/>
                </MudSelect>
            </MudItem>
            <MudItem lg="2" md="2" xs="12">
                <MudDatePicker Label="From Date" Class="m-0" Variant="Variant.Outlined" @bind-Date="eventModel.FromDate" DateFormat="dd.MM.yyyy" />
            </MudItem>
            <MudItem lg="2" md="2" xs="12">
                <MudDatePicker Label="To Date" Class="m-0" Variant="Variant.Outlined" @bind-Date="eventModel.Todate" DateFormat="dd.MM.yyyy" />
            </MudItem>
            <MudItem lg="4" md="4" xs="12">
                <MudSwitch @bind-Checked="eventModel.IsApproved" Class="m-0" Color="Color.Primary" Label="Approved?" />
                <MudSwitch @bind-Checked="eventModel.Ispaymentdone" Class="m-0" Color="Color.Primary" Label="Payment Done?" />
            </MudItem>
            <MudItem lg="12" md="12" xs="12">
                <MudTextField T="string" @bind-Value="eventModel.Description" Class="m-0" Label="Description" Variant="Variant.Outlined" Lines="2" />
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Save" Variant="Variant.Filled">Update</MudButton>
    </DialogActions>
</MudDialog>



@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public Event eventModel { get; set; } = new Event();
    private bool isReadOnly = false;
    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
    private List<Event> eventList = new();


    protected override void OnInitialized()
    {
        if (eventModel is not null && eventModel.Id > 0)
        {
            isReadOnly = true;
        }

        base.OnInitialized();
    }
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            GetAllevents();
            StateHasChanged();
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    private List<Event> GetAllevents()
    {
        eventList = _EventRepository.GetList();
        return eventList;
    }

    private void Save()
    {
        try
        {
            _EventRepository.Update(eventModel);
            eventModel = new Event();
            MudDialog.Close(DialogResult.Ok(true));
            Snackbar.Add("Data Update Successfull.", Severity.Success);
            _EventRepository.SaveChanges();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

    }

}
