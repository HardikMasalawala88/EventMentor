@page "/ViewEvent/{EventId}"
@page "/EditEvent/{EventId}"
@using EMS.DB.Models
@using  EMS.DB.Repository.Interface
@using System.Globalization
@using System.Reflection
@using EMS.DB.Repository
@using EMS.DB.Constant
@inject IEventRepository _EventRepository;
@inject IEventCategoryRepository _EventCategoryRepository;
@inject ICategoryServiceRepository _CategoryServiceRepository;
@inject IPaymentRepository  _PaymentRepository;
@inject ISnackbar Snackbar;
@inject IDialogService DialogService
@inject IPaymentRepository IPaymentRepository
<h3>View Event:</h3>

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudCard Elevation="10" Style="height: 100%" Class="pa-4 rounded-lg">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h4">Event Details</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton OnClick="@(()=> EditEventDetails(EventModel))" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" aria-label="github"></MudIconButton>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudDivider />
                <MudCardContent>
                    <MudText>Event Name : @EventModel.EventName </MudText>
                    <MudText>Organizor Name : @EventModel.OrganizerName</MudText>
                    <MudText>Organizor Contact : @EventModel.OrganizerContact</MudText>
                    <MudText>Event Description : @EventModel.Description</MudText>
                    <MudText>Event Timeing : @EventModel.SlotType</MudText>
                    <MudText>Event FromDate : @EventModel.FromDate</MudText>
                    <MudText>Event ToDate : @EventModel.Todate</MudText>
                    <MudText>Event Venue : @EventModel.EventVenue</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudGrid>
                <MudItem xs="12">
                    <MudCard Elevation="10" Style="height: 100%" Class="pa-4 rounded-lg">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h4">Event Staff:</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                @*<MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" aria-label="github"></MudIconButton>*@
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudDivider />
                        <MudCardContent>
                            <MudText></MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="12">
                    <MudCard Elevation="10" Style="height: 100%" Class="pa-4 rounded-lg">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h4">
                                    Event payment:
                                    @if (PaymentList is not null && PaymentList.Any())
                                    {
                                        @ValidCurrency(PaymentList.FirstOrDefault().TotalAmount)
                                    }
                                </MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton  @onclick="@(() => OpenDialog(PaymentModel))" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" aria-label="github"></MudIconButton>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudDivider />
                        <MudCardContent>
                            <MudGrid >
                                <MudItem md="2">Mode</MudItem>
                                <MudItem md="2">Received AMount</MudItem>
                                <MudItem md="2">Remaining AMount</MudItem>
                                <MudItem md="2">TransactionId</MudItem>
                                <MudItem md="4">Date</MudItem>
                            </MudGrid>
                            @foreach (var payment in PaymentList)
                            {
                        <MudGrid>
                            <MudItem md="2">@payment.PaymentMode</MudItem>
                            <MudItem md="2">@ValidCurrency(@payment.ReceivedAmount)</MudItem>
                            <MudItem md="2">@ValidCurrency(@payment.RemainingAmount)</MudItem>
                            <MudItem md="2">@payment.Transactionid</MudItem>
                            <MudItem md="4">@payment.CreatedOn.ToLocalTime()</MudItem>
                        </MudGrid>
                            }

                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudCard Class="pa-4 rounded-lg" Style="height: 100%" Elevation="10">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h4">Event Service:</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton OnClick="@(() => EditEventSelectService(EventModel))" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" aria-label="github"></MudIconButton>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudDivider />
                <MudCardContent>
                    <MudText>category :@EventCategoryName.CategoryName</MudText>
                    <MudText>
                        Service:@EventModel.SelectedService
                    </MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>

    </MudGrid>
</MudContainer>

@code {

    [Parameter]
    public string EventId { get; set; }
    private CategoryService CategoryServiceModel = new();
    private List<CategoryService> ServiceList = new();
    private List<CategoryService> eventservicelist = new();
    private List<EventCategory> EventCategoryList = new();
    private List<Payment> PaymentList = new();
    private List<Event> eventList = new();
    private Event EventModel = new();
    private Payment PaymentModel = new();
    private EventCategory EventCategoryName = new();

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            EventModel = _EventRepository.GetById(Convert.ToInt64(EventId));
            PaymentModel = _PaymentRepository.GetByEventId(Convert.ToInt64(EventId));
            EventCategoryName = _EventCategoryRepository.GetById(EventModel.CategoryId);
            GetEventCategoryList();
            GetAll();
            GetAllevents();
            GetByEventId();
            GetAllPaymentsByEventId(EventId);
            StateHasChanged();
        }

        return base.OnAfterRenderAsync(firstRender);
    }
    private List<CategoryService> GetAll()
    {
        ServiceList = _CategoryServiceRepository.GetList();
        return ServiceList;
    }

    private void GetEventCategoryList()
    {
        EventCategoryList = _EventCategoryRepository.GetList();
    }

    private List<Event> GetAllevents()
    {
        eventList = _EventRepository.GetList();
        StateHasChanged();
        return eventList;
    }

    public List<Payment> GetByEventId()
    {

        return PaymentList.Where(x => x.EventId == Convert.ToInt64(EventId)).ToList();
    }

    public void OnEventCategoryChange(long selectedEventCategoryId)
    {
    }
    private void EditEventSelectService(Event events)
    {
        var parameters = new DialogParameters();
        parameters.Add("EventModel", events);
        var options = new DialogOptions()
        {
            CloseOnEscapeKey = false,
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            Position = DialogPosition.TopCenter,
            DisableBackdropClick = true
        };
        DialogService.Show<AddEventService>("Add Service", parameters, options);
    }
    private void EditEventDetails(Event events)
    {
        var parameters = new DialogParameters();
        parameters.Add("EventModel", events);
        var options = new DialogOptions()
        {
            CloseOnEscapeKey = false,
            CloseButton = true,
            MaxWidth = MaxWidth.Large,
            Position = DialogPosition.TopCenter,
            DisableBackdropClick = true
        };
        DialogService.Show<EditEvent>("Update Event", parameters, options);
    }

    List<Payment> GetAllPaymentsByEventId(string eventId)
    {
        PaymentList = _PaymentRepository.GetPaymentListByEventId(Convert.ToInt64(eventId));
        return PaymentList;
    }


    string ValidCurrency(string value) => string.Format("₹ {0:#.00}", Convert.ToDecimal(value));

    //public List<CategoryService> GetCategoryServices()
    //{
    //    return ServiceList.Where(x => x.EventCategoryId == EventModel.CategoryId).ToList();
    //}

    private void OpenDialog(Payment payments)
    {

        var parameters = new DialogParameters();
        parameters.Add("PaymentModel", payments);
        var options = new DialogOptions()
        {
            CloseOnEscapeKey = false,
            CloseButton = true,
            MaxWidth = MaxWidth.Large,
            Position = DialogPosition.TopCenter,
            DisableBackdropClick = true

        };

        DialogService.Show<EditPaymentDialog>("Edit Payment", parameters, options);

    }
}
