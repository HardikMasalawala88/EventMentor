@page "/Updatelist"
@using EMS.DB.Models
@using EMS.DB.Repository.Interface
@using System.Globalization
@using EMS.DB.Constant
@inject ISnackbar Snackbar;
@inject IUserRepository _UserRepository;
@inject IDialogService DialogService

<MudTable Elevation="25" Items="GetAlluser()" Filter="new Func<User, bool>(Search)" @bind-customer="userList" HorizontalScrollbar="true" Breakpoint="Breakpoint.Sm">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Update Staff list</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Immediate="true" Placeholder="Search for Event..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Action</MudTh>
        <MudTh>StaffFullname</MudTh>
        <MudTh>StaffMobileNo</MudTh>
        <MudTh>StaffEmail</MudTh>
        <MudTh>StaffAddressLine</MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="">
            <MudFab @onclick="@(() => OpenDialog(context))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small">
                edit
            </MudFab>
            <MudFab @onclick="@(() => Delete(@context.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>

        <MudTd DataLabel="Event Name">@context.UserName </MudTd>
        <MudTd DataLabel="">@context.Usercontactno </MudTd>
        <MudTd DataLabel="">@context.Useremail</MudTd>
        <MudTd DataLabel="">@context.Useraddress</MudTd>
    </RowTemplate>
</MudTable>

@code{
    private string searchString = "";
    private User userModel = new();

    private List<User> userList = new();


    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GetAlluser();
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    private List<User> GetAlluser()
    {
        userList = _UserRepository.GetStaffList();
        return userList;
    }

    private bool Search(User user)
    {
        if (StringValid(user.UserName)
        && StringValid(user.Usercontactno)
        && StringValid(user.Useremail)
        && StringValid(user.Useraddress)
        &&
        user.UserName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
        || user.Usercontactno.Contains(searchString, StringComparison.OrdinalIgnoreCase)
        || user.Useremail.Contains(searchString, StringComparison.OrdinalIgnoreCase)
        || user.Useraddress.Contains(searchString, StringComparison.OrdinalIgnoreCase)
        )
        {
            return true;
        }

        return false;
    }

    private bool StringValid(string strValue)
    {
        if (!string.IsNullOrEmpty(strValue))
        {
            return true;
        }

        return false;
    }

    private void Save()
    {
        try
        {
            _UserRepository.Insert(userModel);
            GetAlluser();
            userModel = new User();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void ShowAddForm()
    {
        userModel = new User();

    }

    private void Edit(long id)
    {
        try
        {
            userModel = userList.FirstOrDefault(c => c.Id == id);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void CancelForm()
    {

        userModel = new User();
    }

    private void Delete(long id)
    {
        try
        {
            _UserRepository.Delete(id);
            GetAlluser();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
    private void OpenDialog(User user)
    {

        var parameters = new DialogParameters();
        parameters.Add("userModel", user);
        var options = new DialogOptions()
        {
            CloseOnEscapeKey = false,
            CloseButton = true,
            MaxWidth = MaxWidth.Large,
            Position = DialogPosition.TopCenter,
            DisableBackdropClick = true

        };
        DialogService.Show<AddStaffDialog>("AddStaffDialog", parameters, options);
    }
}

