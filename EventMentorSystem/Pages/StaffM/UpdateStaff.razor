@page "/staffupdatelist"
@attribute [Authorize(Roles = "Admin,Operator")]
@using EMS.DB.Models
@using EMS.DB.Repository.Interface
@using System.Globalization
@using EMS.DB.Constant
@inject ISnackbar Snackbar;
@inject IUserRepository _UserRepository;
@inject IStaffRepository _StaffRepository;
@inject ICategoryServiceRepository _CategoryServiceRepository;
@inject IDialogService DialogService
        <MudTable Elevation="25" Items="GetAllstaff()" @bind-customer="StaffList" HorizontalScrollbar="true" Breakpoint="Breakpoint.Sm" Class="my-2">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Update Staff List</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString" Immediate="true" Placeholder="Search For Here.." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Action</MudTh>
                <MudTh>Id</MudTh>
                <MudTh>StaffFullname</MudTh>
                <MudTh>StaffEmail</MudTh>
                <MudTh>StaffMobileNo</MudTh>
                <MudTh>Staff Service</MudTh>

            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="">
                    <MudFab @onclick="@(() => OpenDialog(context))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small">
                        edit
                    </MudFab>
                    <MudFab @onclick="@(() => Delete(@context.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
                </MudTd>
                <MudTd DataLabel="">@context.Id </MudTd>
                <MudTd DataLabel="">@context.User.UserName</MudTd>
                <MudTd DataLabel="">@context.User.Email</MudTd>
                <MudTd DataLabel="">@context.User.ContactNo</MudTd>
                @if (context.StaffService > 0)
                {
                    foreach (var data in GetAll())
                    {
                        if (data.Id == context.StaffService)
                        {
                            <MudTd DataLabel="">@data.ServiceName</MudTd>
                        }
                    }
                }
                else
                {
                    <MudTd DataLabel="">Not Selected yet.</MudTd>
                }
            </RowTemplate>
        </MudTable>



@code{
    private string searchString = "";
    private User userModel = new();
    private Staff StaffModel = new();
    private List<CategoryService> Servicelist = new();
    private List<User> userList = new();
    private List<Staff> StaffList = new();

    private List<CategoryService> GetAll()
    {
        Servicelist = _CategoryServiceRepository.GetList();
        return Servicelist;
    }
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GetAlluser();
            GetAllstaff();
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    private List<User> GetAlluser()
    {
        userList = _UserRepository.GetAllUser();
        return userList;
    }
    private List<Staff> GetAllstaff()
    {
        StaffList = _StaffRepository.GetList();
        return StaffList;
    }

    //private bool Search(User user)
    //{
    //    if (StringValid(user.UserName)
    //    && StringValid(user.ContactNo)
    //    && StringValid(user.Email)
    //    && StringValid(user.Useraddress)
    //    &&
    //    user.UserName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
    //    || user.ContactNo.Contains(searchString, StringComparison.OrdinalIgnoreCase)
    //    || user.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase)
    //    || user.Useraddress.Contains(searchString, StringComparison.OrdinalIgnoreCase)
    //    )
    //    {
    //        return true;
    //    }

    //    return false;
    //}

    private bool StringValid(string strValue)
    {
        if (!string.IsNullOrEmpty(strValue))
        {
            return true;
        }

        return false;
    }

    private void Save()
    {
        try
        {
            _StaffRepository.Insert(StaffModel);
            GetAllstaff();
            StaffModel = new Staff();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void ShowAddForm()
    {
        userModel = new User();

    }

    private void Edit(long id)
    {
        try
        {
            StaffModel = StaffList.FirstOrDefault(c => c.Id == id);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void CancelForm()
    {

        userModel = new User();
    }

    private void Delete(long id)
    {
        try
        {
            _StaffRepository.Delete(id);
            GetAlluser();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
    private void OpenDialog(Staff staff)
    {

        var parameters = new DialogParameters();
        parameters.Add("staffModel", staff);
        var options = new DialogOptions()
        {
            CloseOnEscapeKey = false,
            CloseButton = true,
            MaxWidth = MaxWidth.Large,
            Position = DialogPosition.TopCenter,
            DisableBackdropClick = true

        };
        DialogService.Show<AddStaffDialog>("AddStaffDialog", parameters, options);
    }
}
