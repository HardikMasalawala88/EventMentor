@using EMS.DB.Models
@using EMS.DB.Constant
@using EMS.DB.Repository.Interface
@inject IEventRepository _EventRepository;
@inject ISnackbar Snackbar;
@inject IUserRepository _UserRepository;
@inject IEventCategoryRepository _EventCategoryRepository;
@inject ICategoryServiceRepository _CategoryServiceRepository;
@inject IDialogService DialogService
@*<h3>AddStaffDialog</h3>*@
<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem lg="4" md="4" xs="12">
                <MudTextField @bind-Value="userModel.UserName" Class="m-0" Label="Full Name" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
            </MudItem>
            <MudItem lg="4" md="4" xs="12">
                <MudTextField @bind-Value="userModel.Usercontactno" Class="m-0" Label="MobileNo" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
            </MudItem>
            <MudItem lg="4" md="4" xs="12">
                <MudTextField @bind-Value="userModel.Useremail" Class="m-0" Label="AltPhoneNo" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
            </MudItem>
            <MudItem lg="4" md="4" xs="12">
                <MudTextField @bind-Value="userModel.Useraddress" Class="m-0" Label="Email" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
            </MudItem>
            <MudItem>
                @*<MudSelect @bind-Value="ServiceModel.EventCategoryId" Label="select categorys" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">

                    @foreach (var eventCategory in EventCategoryList)
                    {
                        <MudSelectItem Value="@eventCategory.Id">@eventCategory.CategoryName</MudSelectItem>

                    }
                </MudSelect>*@
                @*<MudSelect @bind-Value="ServiceModel.EventCategoryId" Label="select categorys" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">

                    @foreach (var eventCategory in EventCategoryList)
                    {
                        <MudSelectItem Value="@eventCategory.Id">@eventCategory.CategoryName</MudSelectItem>

                    }
                </MudSelect>*@
            </MudItem>
        </MudGrid>


    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CancelForm" Variant="Variant.Filled" Color="Color.Error">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Save" Variant="Variant.Filled">Edit</MudButton>

    </DialogActions>
</MudDialog>

@code {

    private CategoryService ServiceModel = new();
    private List<CategoryService> ServiceList = new();
    private List<EventCategory> EventCategoryList = new();

    private string searchString = "";

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GetEventCategoryList();
            GetAll();

        }

        return base.OnAfterRenderAsync(firstRender);
    }

    private List<CategoryService> GetAll()
    {
        ServiceList = _CategoryServiceRepository.GetList();
        return ServiceList;
    }

    private void GetEventCategoryList()
    {
        EventCategoryList = _EventCategoryRepository.GetList();
    }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public User UserModel { get; set; } = new User();

    private bool isReadOnly = false;
    private User userModel = new();
    private Event eventModel = new();

    private List<User> userList = new();

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

    private List<User> GetLists()
    {
        userList = _UserRepository.GetUserList();
        return userList;
    }

    protected override void OnInitialized()
    {
        if (UserModel is not null && UserModel.Id > 0)
        {
            isReadOnly = true;
        }
        userModel = UserModel;
        base.OnInitialized();
    }


    private void Save()
    {
        try
        {
            _UserRepository.Insert(userModel);
            MudDialog.Close(DialogResult.Ok(true));
            userModel = new User();

        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

    }

    private void reject(long id)
    {
        try
        {
            _UserRepository.Delete(id);
            GetLists();
            MudDialog.Close(DialogResult.Ok(true));
            userModel = new User();
            Snackbar.Add("Inquiry Rejected Successfull.", Severity.Success);

        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

    }
    private void CancelForm()
    {
        MudDialog.Close(DialogResult.Ok(true));
        userModel = new User();
    }

    private void OpenDialog(Inquiry inquiry, Event events)
    {

        var parameters = new DialogParameters();
        parameters.Add("InquiryModel", inquiry);
        parameters.Add("EventModel", events);
        var options = new DialogOptions()
        {
            CloseOnEscapeKey = false,
            CloseButton = true,
            MaxWidth = MaxWidth.Large,
            Position = DialogPosition.TopCenter,
            DisableBackdropClick = true
        };



    }


}
