@page "/eventlist"
@using EMS.DB.Models
@using System.Globalization
@using System.Reflection
@using EMS.DB.Service
@using EMS.DB.Constant
@inject IEventService _eventService;
@*@inject MudBlazor.Snackbar snackBar;*@

<h1>Event Listing</h1>


@if (IsEdit || IsAdd)
{
    <MudCard Elevation="25">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Add / Edit Students</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudItem>
                <MudTextField @bind-Value="eventModel.EventName" Label="Event Name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
                <MudTextField @bind-Value="eventModel.OperatorName" Label="Operator Name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
                <MudTextField @bind-Value="eventModel.EventVenue" Label="EventVenue" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
                <MudTextField @bind-Value="eventModel.OrganizerName" Label="Organizer Name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
                <MudTextField @bind-Value="eventModel.OrganizerContact" Label="Organizer Contact" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
                <MudTextField @bind-Value="eventModel.Description" Label="" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
                <MudDatePicker Label="Scheduled On" @bind-Date="eventModel.ScheduledOn" DateFormat="dd.MM.yyyy" />
                <MudSwitch @bind-Checked="eventModel.IsApproved" Color="Color.Primary" />
            </MudItem>
            <MudItem Class="d-flex justify-end">
                <MudButton Class="mx-1" Variant="Variant.Filled" Color="Color.Error" OnClick="CancelForm">
                    <FontLable FontWeight="500">Cancel</FontLable>
                </MudButton>
                <MudButton Class="mx-1" Variant="Variant.Filled" Color="Color.Primary" OnClick="Save">
                    <FontLable FontWeight="500">Add</FontLable>
                </MudButton>
            </MudItem>
        </MudCardContent>
    </MudCard>
}
else
{

<MudItem Class="d-flex justify-end">
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ShowAddForm">
        <FontLable FontWeight="500">Add</FontLable>
    </MudButton>
</MudItem>
}

<MudTable Elevation="25" Items="GetAllevents()" Filter="new Func<Event, bool>(Search)" @bind-customer="eventList">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Event list</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Immediate="true" Placeholder="Search for Event..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Event Name</MudTh>
        <MudTh>Operator Name</MudTh>
        <MudTh>EventVenue</MudTh>
        <MudTh>OrganizorName</MudTh>
        <MudTh>OrganizorNo</MudTh>
        <MudTh>Action</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.EventID</MudTd>
        <MudTd DataLabel="Event Name">@context.EventName</MudTd>
        <MudTd DataLabel="">@context.OperatorName</MudTd>
        <MudTd DataLabel="">@context.EventVenue</MudTd>
        <MudTd DataLabel="">@context.OrganizerName</MudTd>
        <MudTd DataLabel="">@context.OrganizerContact</MudTd>
        <MudTd DataLabel="">@context.Description</MudTd>
        <MudTd DataLabel="">@context.ScheduledOn</MudTd>
        <MudTd DataLabel="">@context.IsApproved</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(()=>Edit(@context.EventID))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(()=>Delete(@context.EventID))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 5,10,20,50}" />
    </PagerContent>
</MudTable>

@code{

    private string searchString = "";



    private Event eventModel = new();
    private bool IsEdit;
    private bool IsAdd;
    private List<Event> eventList = new();


    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GetAllevents();
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    private List<Event> GetAllevents()
    {
        eventList = _eventService.GetEvents();
        return eventList;
    }

    private bool Search(Event events)
    {
        if (StringValid(events.EventName)
            && StringValid(events.OperatorName)
            && StringValid(events.EventVenue)
            && StringValid(events.OrganizerName)
            && StringValid(events.OrganizerContact)
            && StringValid(events.Description)
            &&
            events.EventName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || events.OperatorName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || events.EventVenue.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || events.OrganizerName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || events.OrganizerContact.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        return false;
    }

    private bool StringValid(string strValue)
    {
        if (!string.IsNullOrEmpty(strValue))
        {
            return true;
        }

        return false;
    }







    private void Save()
    {
        _eventService.InsertEvent(eventModel);
        // snackBar.Add(" record saved", Severity.Success);
        GetAllevents();
        IsEdit = false;
        IsAdd = false;
        eventModel = new Event();


    }

    private void ShowAddForm()
    {
        eventModel = new Event();
        IsAdd = true;
    }

    private void Edit(long id)
    {
        IsEdit = true;
        eventModel = eventList.FirstOrDefault(c => c.EventID == id);
    }

    private void CancelForm()
    {
        IsEdit = false;
        IsAdd = false;
        eventModel = new Event();
    }


    private void Delete(long id)
    {
        _eventService.DeleteEvent(id);
        //snackBar.Add("Customer Data Deleted.", Severity.Success);
        GetAllevents();
    }

}