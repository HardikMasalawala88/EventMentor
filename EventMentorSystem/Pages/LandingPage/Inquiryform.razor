@page "/Inquryform"
@using EMS.DB.Models
@using  EMS.DB.Repository.Interface
@using System.Globalization
@using System.Reflection
@using EMS.DB.Repository
@using EMS.DB.Constant
@using System.ComponentModel.DataAnnotations
@inject ISnackbar Snackbar;
@inject IEventCategoryRepository _EventCategoryRepository;
@inject IInquiryRepository _InquiryRepository;
@inject ICategoryServiceRepository _CategoryServiceRepository;

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Inquiry Form</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
       
        <MudItem>
            <MudTextField @bind-Value="inquiryModel.Fullname" Label="Full Name" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="inquiryModel.MobileNo" Label="MobileNo" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="inquiryModel.AltPhoneNo" Label="AltPhoneNo" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="inquiryModel.Email" Label="Email" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="inquiryModel.AddressLine1" Label="AddressLine1" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="inquiryModel.AddressLine2" Label="AddressLine2" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="inquiryModel.Landmark" Label="Landmark" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="inquiryModel.Pincode" Label="Pincode" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="inquiryModel.City" Label="city" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="inquiryModel.State" Label="State" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="inquiryModel.NoOfAttendee" Label="NoOfAttendee" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
            <MudSelect @bind-Value="inquiryModel.EventCategoryId" T="long" Label="select categorys" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                @foreach (var eventCategory in EventCategoryList)
                {
                    <MudSelectItem Value="@eventCategory.Id">@eventCategory.CategoryName</MudSelectItem>

                }
            </MudSelect>
            <MudRadioGroup @bind-SelectedOption="@inquiryModel.SlotType">
                <MudRadio Option="@(EventSlotType.Morning.ToString())" Color="Color.Primary">@EventSlotType.Morning.ToString()</MudRadio>
                <MudRadio Option="@(EventSlotType.Evening.ToString())" Color="Color.Primary">@EventSlotType.Evening.ToString()</MudRadio>
                <MudRadio Option="@(EventSlotType.FullDay.ToString())" Color="Color.Primary">@EventSlotType.FullDay.ToString()</MudRadio>
                <MudRadio Option="@(EventSlotType.MultipleDay.ToString())" Color="Color.Primary">@EventSlotType.MultipleDay.ToString()</MudRadio>
            </MudRadioGroup>
            
            <MudDatePicker Variant="Variant.Outlined" Label="From Date" Date="inquiryModel.FromDate" DateFormat="dd.MM.yyyy" />
            @if (inquiryModel.SlotType == "MultipleDay")
            {
                <MudDatePicker Variant="Variant.Outlined" Label="To Date" Date="inquiryModel.ToDate" DateFormat="dd.MM.yyyy" />
            }
        </MudItem>
        <MudItem Class="d-flex justify-end flex-wrap gap-4">
            <MudButton Class="mx-1" Variant="Variant.Filled" Color="Color.Error" OnClick="CancelForm">
                <FontLabel Fontweight="500" FontColor="white">Cancel</FontLabel>
            </MudButton>
            <MudButton Class="mx-1" Variant="Variant.Filled" Color="Color.Primary" OnClick="Save">
                <FontLabel Fontweight="500" FontColor="white">Add</FontLabel>
            </MudButton>
        </MudItem>
    </MudCardContent>
</MudCard>


@code{
    private CategoryService ServiceModel = new();
    private List<EventCategory> EventCategoryList = new();
    private Inquiry inquiryModel = new();
    private List<Inquiry> inquiryList = new();
    private List<CategoryService> ServiceList = new();
    private Event EventModel = new();


    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            inquiryModel.FromDate = DateTime.Today.AddDays(7);
            inquiryModel.ToDate = DateTime.Today.AddDays(7);
            GetEventCategoryList();
            StateHasChanged();
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    private void GetEventCategoryList()
    {
        EventCategoryList = _EventCategoryRepository.GetList();
    }

    private void Save()
    {

        try
        {
            _InquiryRepository.Insert(inquiryModel);
            inquiryModel = new Inquiry();
            Snackbar.Add(ToastrMessages.InquirySuccessEndUser, Severity.Success);

        }
        catch (Exception ex)
        {

            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void ShowAddForm()
    {
        inquiryModel = new Inquiry();

    }
    private void CancelForm()
    {

        inquiryModel = new Inquiry();
    }

}