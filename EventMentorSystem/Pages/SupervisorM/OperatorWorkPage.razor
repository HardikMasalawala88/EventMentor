@page "/OperatorWork"
@using EMS.DB.Models
@using  EMS.DB.Repository.Interface
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject IOperatorWorkRepository _OperatorWorkRepository;
@inject ISnackbar Snackbar;
@using EMS.DB.Constant
<h3>OperatorWorkPage</h3>

@if (IsEdit || IsAdd)
{
    <MudCard Elevation="25">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Operator Work</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudItem>
                <MudTextField @bind-Value="OperatorWorkModel.EventId" Label="Event Id" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
                <MudTextField @bind-Value="OperatorWorkModel.Service" Label="Service" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
                <MudTextField @bind-Value="OperatorWorkModel.Description" Label="Description" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
                <MudSelect T="String" @bind-Value="@OperatorWorkModel.Status" Label="Status" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="@(Status.Workpending.ToString())" />
                    <MudSelectItem Value="Status.WorkOnProcess.ToString()" />
                    <MudSelectItem Value="Status.WorkFinish.ToString()" />
                </MudSelect>
            </MudItem>
            <MudItem Class="d-flex justify-end">
                <MudButton Class="mx-1" Variant="Variant.Filled" Color="Color.Error" OnClick="CancelForm">
                    <FontLable FontWeight="500">Cancel</FontLable>
                </MudButton>
                <MudButton Class="mx-1" Variant="Variant.Filled" Color="Color.Primary" OnClick="Save">
                    <FontLable FontWeight="500">Add</FontLable>
                </MudButton>
            </MudItem>
        </MudCardContent>
    </MudCard>
}
else
{

    <MudItem Class="d-flex justify-end">
        <MudButton Variant="Variant.Filled" Color="Color.Primary " OnClick="ShowAddForm">
            <FontLable FontWeight="500">Add</FontLable>
        </MudButton>
    </MudItem>
}

<MudTable Elevation="25" Items="GetAllOperatorWork()" T="OperatorWork" Filter="new Func<OperatorWork, bool>(Search)" Class="w-100" @bind-customer="OperatorWorkList">
    <ToolBarContent>
        <MudText Typo="Typo.h6"> list</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Immediate="true" Placeholder="Search for Event..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Action</MudTh>
        <MudTh>Id</MudTh>
        <MudTh>Event Name</MudTh>
        <MudTh>Event Venue</MudTh>
        <MudTh>From Date</MudTh>
        <MudTh>Slot</MudTh>
        <MudTh>Service</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Status</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="">
            <MudFab @onclick="@(()=>Edit(@context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Id">@context.Event.EventName</MudTd>
        <MudTd DataLabel="Id">@context.Event.EventVenue</MudTd>
        <MudTd DataLabel="Id">@context.Event.FromDate</MudTd>
        <MudTd DataLabel="Id">@context.Event.SlotType</MudTd>
        <MudTd DataLabel="Id">@context.Service</MudTd>
        <MudTd DataLabel="Id">@context.Description</MudTd>
        <MudTd DataLabel="Id">@context.Status</MudTd>

    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 5,10,20,50}" />
    </PagerContent>
</MudTable>

@code {
    private string searchString = "";
    private List<OperatorWork> OperatorWorkList = new();
    private OperatorWork OperatorWorkModel = new();
    private bool IsEdit;
    private bool IsAdd;
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GetAllOperatorWork();
        }

        return base.OnAfterRenderAsync(firstRender);
    }
    private List<OperatorWork> GetAllOperatorWork()
    {
        OperatorWorkList = _OperatorWorkRepository.GetOperatorWorkList();
        return OperatorWorkList;
    }
    private void Save()
    {
        try
        {
            if (OperatorWorkModel.Id < 0)
            {
                _OperatorWorkRepository.Insert(OperatorWorkModel);
                Snackbar.Add(" record Given SucessFull", Severity.Success);
                GetAllOperatorWork();
                OperatorWorkModel = new OperatorWork();
                IsAdd = false;
            }
            else
            {
                _OperatorWorkRepository.Update(OperatorWorkModel);
                Snackbar.Add(" record Update sucessfull", Severity.Success);
                GetAllOperatorWork();
                OperatorWorkModel = new OperatorWork();
                IsAdd = false;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private bool Search(OperatorWork OperatorWorks)
    {
        if (StringValid(OperatorWorks.Service)
            && StringValid(OperatorWorks.Description)
            && StringValid(OperatorWorks.Status)
            &&
            OperatorWorks.Service.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || OperatorWorks.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || OperatorWorks.Status.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        return false;
    }
    private bool StringValid(string strValue)
    {
        if (!string.IsNullOrEmpty(strValue))
        {
            return true;
        }

        return false;
    }
    private void CancelForm()
    {
        try
        {
            IsEdit = false;
            IsAdd = false;
            OperatorWorkModel = new OperatorWork();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
    private void ShowAddForm()
    {
        OperatorWorkModel = new OperatorWork();
        IsAdd = true;
    }
    private void Edit(long id)
    {

        try
        {

            OperatorWorkModel = OperatorWorkList.FirstOrDefault(c => c.Id == id);
            IsEdit = true;
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}
